.. _python3-strings:

Python 3: Строки. Функции и методы строк
========================================

Базовые операции
------------------

.. code-block:: python

    # Конкатенация (сложение)
    >>> s1 = 'spam'
    >>> s2 = 'eggs'
    >>> print(s1 + s2) 
    'spameggs'
    
    # Дублирование строки
    >>> print('spam' * 3) 
    spamspamspam
    
    # Длина строки
    >>> len('spam') 
    4
    
    # Доступ по индексу
    >>> S = 'spam'
    >>> S[0]      
    's'
    >>> S[2]
    'a'
    >>> S[-2]
    'a'
    
    # Срез
    >>> s = 'spameggs'
    >>> s[3:5]           
    'me'
    >>> s[2:-2]
    'ameg'
    >>> s[:6]
    'spameg'
    >>> s[1:]
    'pameggs'
    >>> s[:]
    'spameggs'
    
    # Шаг, извлечения среза
    >>> s[::-1]
    'sggemaps'
    >>> s[3:5:-1]
    ''
    >>> s[2::2]
    'aeg'

    
Другие функции и методы строк
-----------------------------

.. code-block:: python

    # Литералы строк
    S = 'str'; S = "str"; S = '''str'''; S = """str"""	
    # Экранированные последовательности
    S = "s\np\ta\nbbb"	
    # Неформатированные строки (подавляют экранирование)
    S = r"C:\temp\new"	
    # Строка байтов
    S = b"byte"	
    # Конкатенация (сложение строк)
    S1 + S2	
    # Повторение строки
    S1 * 3	
    # Обращение по индексу
    S[i]
    # Извлечение среза
    S[i:j:step]	
    # Длина строки
    len(S)	
    # Поиск подстроки в строке. Возвращает номер первого вхождения или -1
    S.find(str, [start],[end])	
    # Поиск подстроки в строке. Возвращает номер последнего вхождения или -1
    S.rfind(str, [start],[end])	
    # Поиск подстроки в строке. Возвращает номер первого вхождения или вызывает ValueError
    S.index(str, [start],[end])	
    # Поиск подстроки в строке. Возвращает номер последнего вхождения или вызывает ValueError
    S.rindex(str, [start],[end])
    # Замена шаблона
    S.replace(шаблон, замена)	
    # Разбиение строки по разделителю
    S.split(символ)	
    # Состоит ли строка из цифр
    S.isdigit()	
    # Состоит ли строка из букв
    S.isalpha()	
    # Состоит ли строка из цифр или букв
    S.isalnum()	
    # Состоит ли строка из символов в нижнем регистре
    S.islower()	
    # Состоит ли строка из символов в верхнем регистре
    S.isupper()	
    # Состоит ли строка из неотображаемых символов (пробел, символ перевода страницы ('\f'), "новая строка" ('\n'), "перевод каретки" ('\r'), "горизонтальная табуляция" ('\t') и "вертикальная табуляция" ('\v'))
    S.isspace()	
    # Начинаются ли слова в строке с заглавной буквы
    S.istitle()	
    # Преобразование строки к верхнему регистру
    S.upper()	
    # Преобразование строки к нижнему регистру
    S.lower()	
    # Начинается ли строка S с шаблона str
    S.startswith(str)	
    # Заканчивается ли строка S шаблоном str
    S.endswith(str)	
    # Сборка строки из списка с разделителем S
    S.join(список)	
    # Символ в его код ASCII
    ord(символ)	
    # Код ASCII в символ
    chr(число)	
    # Переводит первый символ строки в верхний регистр, а все остальные в нижний
    S.capitalize()	
    # Возвращает отцентрованную строку, по краям которой стоит символ fill (пробел по умолчанию)
    S.center(width, [fill])	
    # Возвращает количество непересекающихся вхождений подстроки в диапазоне [начало, конец] (0 и длина строки по умолчанию)
    S.count(str, [start],[end])	
    # Возвращает копию строки, в которой все символы табуляции заменяются одним или несколькими пробелами, в зависимости от текущего столбца. Если TabSize не указан, размер табуляции полагается равным 8 пробелам
    S.expandtabs([tabsize])	
    # Удаление пробельных символов в начале строки
    S.lstrip([chars])	
    # Удаление пробельных символов в конце строки
    S.rstrip([chars])	
    # Удаление пробельных символов в начале и в конце строки
    S.strip([chars])	
    # Возвращает кортеж, содержащий часть перед первым шаблоном, сам шаблон, и часть после шаблона. Если шаблон не найден, возвращается кортеж, содержащий саму строку, а затем две пустых строки
    S.partition(шаблон)	
    # Возвращает кортеж, содержащий часть перед последним шаблоном, сам шаблон, и часть после шаблона. Если шаблон не найден, возвращается кортеж, содержащий две пустых строки, а затем саму строку
    S.rpartition(sep)	
    # Переводит символы нижнего регистра в верхний, а верхнего – в нижний
    S.swapcase()	
    # Первую букву каждого слова переводит в верхний регистр, а все остальные в нижний
    S.title()	
    # Делает длину строки не меньшей width, по необходимости заполняя первые символы нулями
    S.zfill(width)	
    # Делает длину строки не меньшей width, по необходимости заполняя последние символы символом fillchar
    S.ljust(width, fillchar=" ")	
    # Делает длину строки не меньшей width, по необходимости заполняя первые символы символом fillchar
    S.rjust(width, fillchar=" ")	


Форматирование строк
---------------------

.. code-block:: python

    S.format(*args, **kwargs)	



Примеры
-------

Python: Определение позиции подстроки (функции str.find и str.rfind) 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Определение позиции подстроки в строке с помощью функций ``str.find`` и ``str.rfind``.

.. code-block:: python

    In [1]: str = 'ftp://dl.dropbox.com/u/7334460/Magick_py/py_magick.pdf'

Функция ``str.find`` показывает первое вхождение подстроки. Все позиции возвращаются относительно начало строки.

.. code-block:: python

    In [2]: str.find('/')
    Out[2]: 4
    
    In [3]: str[4]
    Out[3]: '/'

Можно определить вхождение в срезе. первое число показывает начало среза, в котором производится поиск. Второе число — конец среза. В случае отсутствия вхождения подстроки выводится -1.

.. code-block:: python

    In [4]: str.find('/', 8, 18)
    Out[4]: -1
    
    In [5]: str[8:18]
    Out[5]: '.dropbox.c'
    
    In [6]: str.find('/', 8, 22)
    Out[6]: 20
    
    In [7]: str[8:22]
    Out[7]: '.dropbox.com/u'
    
    In [8]: str[20]
    Out[8]: '/'

Функция ``str.rfind`` осуществляет поиск с конца строки, но возвращает позицию подстроки относительно начала строки.

.. code-block:: python

    In [9]: str.rfind('/')
    Out[9]: 40
    
    In [10]: str[40]
    Out[10]: '/'


Python: Извлекаем имя файла из URL
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Понадобилось мне отрезать от URL всё, что находится после последнего слэша, т.е.названия файла. URL можеть быть какой угодно. Знаю, что задачу запросто можно решить с помощью специального модуля, но я хотел избежать этого. Есть, как минимум, два способа справиться с поставленным вопросом.

Способ №1
```````````

Достаточно простой способ. Разбиваем строку по слэшам с помощью функции ``split()``, которая возвращает список. А затем из этого списка извлекаем последний элемент. Он и будет названием файла.

.. code-block:: python

    In [1]: str = 'http://dl.dropbox.com/u/7334460/Magick_py/py_magick.pdf'

    In [2]: str.split('/')
    Out[2]: ['http:', '', 'dl.dropbox.com', 'u', '7334460', 'Magick_py', 'py_magick.pdf']

Повторим шаг с присвоением переменной:

.. code-block:: python

    In [3]: file_name = str.split('/')[-1]
    
    In [4]: file_name
    Out[4]: 'py_magick.pdf'

Способ №2
`````````

Второй способ интереснее. Сначала с помощью функции ``rfind()`` находим первое вхождение с конца искомой подстроки. Функция возвращает позицию подстроки относительно начала строки. А далее просто делаем срез.

.. code-block:: python

    In [5]: str = 'http://dl.dropbox.com/u/7334460/Magick_py/py_magick.pdf'
    
    In [6]: str.rfind('/')
    Out[6]: 41

Делаем срез:

.. code-block:: python

    In [7]: file_name = str[42:]
    
    In [8]: file_name
    Out[8]: 'py_magick.pdf'

Дополнительные материалы
--------------------------------

* `Учим старую собаку новым трюкам или как я научился любить str.format и отказался от % <http://habrahabr.ru/post/236633/>`_
* `Строки. Функции и методы строк <http://pythonworld.ru/tipy-dannyx-v-python/stroki-funkcii-i-metody-strok.html>`_
* `Работа со строками в Python: литералы <http://pythonworld.ru/tipy-dannyx-v-python/stroki-literaly-strok.html>`_
* `Погружение в Python 3 (Пилгрим)/Строки <https://ru.wikisource.org/wiki/%D0%9F%D0%BE%D0%B3%D1%80%D1%83%D0%B6%D0%B5%D0%BD%D0%B8%D0%B5_%D0%B2_Python_3_%28%D0%9F%D0%B8%D0%BB%D0%B3%D1%80%D0%B8%D0%BC%29/%D0%A1%D1%82%D1%80%D0%BE%D0%BA%D0%B8>`_




Python: удаление не пустых папок
Модуль os содержит ряд функций для работы с файлами, в том числе функции
os.remove(path)
os.removedirs(path)
os.rmdir(path)
Однако они могут удалять только пустые папки.

Для удаления не пустых папок нужно использовать модуль shutil и функцию из него shutil.rmtree(path, ignore_errors=False, onerror=None)


